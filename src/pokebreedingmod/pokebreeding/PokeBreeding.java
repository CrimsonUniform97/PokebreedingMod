package com.pokebreedingmod.pokebreeding;

import java.io.File;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.HashMap;

import com.pokebreedingmod.pokebreeding.commands.CommandBreed;
import com.pokebreedingmod.pokebreeding.commands.CommandHatch;
import com.pokebreedingmod.pokebreeding.TickHandler;

import net.minecraft.command.ServerCommandManager;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.StringTranslate;
import net.minecraftforge.common.config.Configuration;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

@Mod(modid = "pokebreeding", name = "PokeBreeding", version = "3.1", dependencies = "required-after:pixelmon", acceptableRemoteVersions="*")
public class PokeBreeding {

	@Instance("pokebreeding")
	public static PokeBreeding instance;
	
	public static MinecraftServer MCserver;

	public static StringTranslate stringtranslate = new StringTranslate();

	@SidedProxy(serverSide = "com.pokebreedingmod.pokebreeding.CommonProxy")
	public static CommonProxy proxy;

	public static File modDirectory;
	public static File configDirectory;
	
	public static SimpleNetworkWrapper network;
	
	//PC checker username list
	//public static List<String, ArrayList<>> pcCheckers = new ArrayList<String>();
	//public static HashMap<String, List<NBTTagCompound>> pcCheckers = new HashMap<String, List<NBTTagCompound>>();
	//public static HashMap<String, List<NBTTagCompound>> partyCheckers = new HashMap<String, List<NBTTagCompound>>();
	public static HashMap<String, Long> cooldowns = new HashMap<String, Long>();
	public static HashMap<String, Long> breedWorldTime = new HashMap<String, Long>();
	
	//HashMap<String, HashMap<String, Long>> cooldowns = new HashMap<String, HashMap<String, Long>>();

	Configuration config;

	@Mod.EventHandler
	@SideOnly(Side.SERVER)
	public void preInit(FMLPreInitializationEvent event) {
		AddMeta(event, "3.0.2");
		instance = this;
		config = new Configuration(event.getSuggestedConfigurationFile());
		config.load();
		modDirectory = new File(event.getModConfigurationDirectory().getParent());
		configDirectory = event.getModConfigurationDirectory();
		network = NetworkRegistry.INSTANCE.newSimpleChannel("pokebreeding");
		
	}
	
	@Mod.EventHandler
	@SideOnly(Side.SERVER)
	public void init(FMLInitializationEvent event) {
		proxy.registerKeyBindings();
		proxy.registerRenderers();
		proxy.registerInteractions();
		FMLCommonHandler.instance().bus().register(new TickHandler());
	}

	@Mod.EventHandler
	@SideOnly(Side.SERVER)
	public void postInit(FMLPostInitializationEvent event) {
		proxy.registerSounds();
	}

	@Mod.EventHandler
	@SideOnly(Side.SERVER)
	public void onServerStart(FMLServerStartingEvent event) {

		if (MinecraftServer.getServer().getCommandManager() instanceof ServerCommandManager) {
			((ServerCommandManager) MinecraftServer.getServer().getCommandManager()).registerCommand(new CommandBreed());
			((ServerCommandManager) MinecraftServer.getServer().getCommandManager()).registerCommand(new CommandHatch());
		}
	}

	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.FIELD)
	public @interface Block {
		/**
		 * The block's name
		 */
		String name();
	}

	/**
	 * Add Pack Meta Data
	 */
	private void AddMeta(FMLPreInitializationEvent event, String version) {

		ModMetadata m = event.getModMetadata(); // This is required or it will
												// not work
		m.autogenerated = false; // This is required otherwise it will not work
		m.modId = "pokebreeding";
		m.version = version;
		m.name = "PokeBreeding";
		m.url = "http://www.fireredmc.com";
		m.updateUrl = "http://www.fireredmc.com";
		m.description = "Pixelmon Breeding Sidemod";
		m.authorList.add("savior67");

	}
	
	
}
